/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef union{
	struct{
		uint8_t b0: 1;
		uint8_t b1: 1;
		uint8_t b2: 1;
		uint8_t b3: 1;
		uint8_t b4: 1;
		uint8_t b5: 1;
		uint8_t b7: 1;
	}F;
	uint8_t BYTE;
}Led_union_t;
typedef struct{

	uint8_t led1 : 1;
	uint8_t led2 : 1;
	uint8_t led3 : 1;
	uint8_t led4 : 1;
}Led_t;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
QueueHandle_t queue_led = NULL;
/* USER CODE END Variables */
osThreadId TareaPorDefectoHandle;
osThreadId ledTaskHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void Tarea1(void const * argument);
void TareaLed(void const * argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  /* place for user code */
}
/* USER CODE END GET_IDLE_TASK_MEMORY */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	queue_led = xQueueCreate(4, sizeof(Led_t));
	configASSERT(queue_led != NULL);
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TareaPorDefecto */
  osThreadDef(TareaPorDefecto, Tarea1, osPriorityNormal, 0, 256);
  TareaPorDefectoHandle = osThreadCreate(osThread(TareaPorDefecto), NULL);

  /* definition and creation of ledTask */
  osThreadDef(ledTask, TareaLed, osPriorityIdle, 0, 128);
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}

/* USER CODE BEGIN Header_Tarea1 */
/**
  * @brief  Function implementing the TareaPorDefecto thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Tarea1 */
void Tarea1(void const * argument)
{
	Led_t xQueue;
  /* USER CODE BEGIN Tarea1 */
  /* Infinite loop */
  for(;;)
  {
	  xQueue.led1 = 1; xQueue.led1 = 0; xQueue.led1 = 0; xQueue.led1 = 0;
	  xQueueSend(queue_led, (void *) &xQueue, 1000);
	  osDelay(500);
	  xQueue.led1 = 0; xQueue.led1 = 1; xQueue.led1 = 0; xQueue.led1 = 0;
	  xQueueSend(queue_led, (void *) &xQueue, 1000);
	  osDelay(1000);
	  xQueue.led1 = 0; xQueue.led1 = 0; xQueue.led1 = 1; xQueue.led1 = 0;
	  xQueueSend(queue_led, (void *) &xQueue, 1000);
	  osDelay(200);
	  xQueue.led1 = 0; xQueue.led1 = 0; xQueue.led1 = 0; xQueue.led1 = 1;
	  xQueueSend(queue_led, (void *) &xQueue, 1000);
	  osDelay(2000);
  }
  /* USER CODE END Tarea1 */
}

/* USER CODE BEGIN Header_TareaLed */
/**
* @brief Function implementing the ledTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TareaLed */
void TareaLed(void const * argument)
{
	Led_t xQueue_rx;
  /* USER CODE BEGIN TareaLed */
  /* Infinite loop */
  for(;;)
  {
    if(xQueueReceive(queue_led, (void *)&xQueue_rx, portMAX_DELAY) == pdTRUE){
    	GPIOD->ODR &=~ (0xF<<12);
    	GPIOD->ODR |= xQueue_rx.led1<<15 | xQueue_rx.led2<<14 | xQueue_rx.led3<<13 | xQueue_rx.led4<<12;
    }
  }
  /* USER CODE END TareaLed */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */
